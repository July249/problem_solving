// 그래프

// 그래프는 정점과 정점 사이를 연결하는 간선으로 이루어진 비선형 자료구조로 정점 집합과 간선 집합으로 표현할 수 있다

// 1. 그래프의 특징
/* 
- 정점은 여러 개의 간선을 가질 수 있다
- 크게 방향 그래프와 무방향 그래프로 나눌 수 있다
- 간선은 가중치를 가진다
- 사이클이 발생할 수 있다
*/

// 2. 무방향 그래프
/* 
간선으로 이어진 정점끼리는 양방향으로 이동이 가능하다
표현하기에 (A, B)와 (B, A)는 같은 간선으로 취급된다
ex) 양방향 통행 도로
*/

// 3. 방향 그래프
/* 
간선에 방향성이 존재하는 그래프
양방향으로 갈 수 있더라도 <A, B>와 <B, A>는 다른 간선으로 취급된다
ex) 일방 통행
*/

// 4. 연결 그래프
/* 
모든 정점이 서로 이동 가능한 상태인 그래프
(즉, 고립된 정점이 없음)
*/

// 5. 비연결 그래프
/*
특정 정점 쌍 사이에 간선이 존재하지 않는 그래프
(즉, 고립된 정점이 있음) 
*/

// 6. 완전 그래프
/* 
모든 정점끼리 연결된 상태인 그래프
한 정점의 간선 수 = 모든 정점의 수 - 1
모든 간선의 수 = (모든 정점의 수 - 1) * 모든 정점의 수
*/

// 7. 사이클
/* 
그래프의 정점과 간선의 부분 집합에서 순환이 되는 부분
(방향그래프이면서 동시에 2개 이상의 정점끼리 서로 순환하는 구조의 간선이 존재하는 경우를 말한다)
*/

// 8. 그래프의 구현 방법
/* 
인접 행렬, 인접 리스트 두가지 방식으로 그래프를 표현할 수 있다
*/

// 9. JS에서의 사용법
/*
ex) 구현하고자 하는 graph
0 -> 1 -> 2 -> 0 or 4
4 -> 0 -> 1 or 3
3 -> 2 -> 0 or 4
*/
// - 인접 행렬
/*
const graph = Array.from(Array(5), () => Array(5).fill(false));
*/
// 5 x 5 행렬을 만들고 모두 false를 기본값으로 하는 행렬을 생성
/*
graph[0][1] = true; // 0 -> 1
graph[0][3] = true; // 0 -> 3
graph[1][2] = true; // 1 -> 2
graph[2][0] = true; // 2 -> 0
graph[2][4] = true; // 2 -> 4
graph[3][2] = true; // 3 -> 2
graph[4][0] = true; // 4 -> 0
*/
// Result
/* 
0 | 1 | 0 | 1 | 0
0 | 0 | 1 | 0 | 0
1 | 0 | 0 | 0 | 1
0 | 0 | 1 | 0 | 0
1 | 0 | 0 | 0 | 0
*/

// NOTE: 가중치를 넣고 싶다면, null을 기본값으로 하고 임의의 가중치 값을 true인 경우에 넣으면 된다
// NOTE: 무방향 그래프 구현의 경우, 대칭 행렬로 만들면 된다

// - 인접 리스트
const graph = Array.from(Array(5), () => []);

graph[0].push(1); // 0 -> 1
graph[0].push(3); // 0 -> 3
graph[1].push(2); // 1 -> 2
graph[2].push(0); // 2 -> 0
graph[2].push(4); // 2 -> 4
graph[3].push(2); // 3 -> 2
graph[4].push(0); // 4 -> 0

// Result
/* 
0 | 1 3
1 | 2
2 | 0 4
3 | 2
4 | 0
*/

// 정점의 수 만큼 배열을 만들고, 연결할 정점을 배열에 추가하면 된다
